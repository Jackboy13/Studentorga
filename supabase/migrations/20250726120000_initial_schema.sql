/*
          # Initial Schema Setup
          This script sets up the initial database schema for the Student Organization Management System. It creates tables for profiles, announcements, events, and payments, and establishes relationships and security policies.

          ## Query Description: This operation is foundational and will create the entire table structure for the application. It is safe to run on a new project but could be destructive if tables with the same names already exist. No existing data will be affected if the database is empty.
          
          ## Metadata:
          - Schema-Category: "Structural"
          - Impact-Level: "High"
          - Requires-Backup: false
          - Reversible: false
          
          ## Structure Details:
          - **Tables Created**: `profiles`, `announcements`, `events`, `payments`
          - **Triggers Created**: `on_auth_user_created` to populate the `profiles` table.
          - **RLS Enabled**: On all new tables.
          
          ## Security Implications:
          - RLS Status: Enabled
          - Policy Changes: Yes, new policies are created for all tables to enforce role-based access.
          - Auth Requirements: Policies are based on `auth.uid()` and a custom `role` column in the `profiles` table.
          
          ## Performance Impact:
          - Indexes: Primary keys and foreign keys are indexed automatically.
          - Triggers: One trigger is added to the `auth.users` table.
          - Estimated Impact: Low, as this is the initial setup.
          */

-- 1. PROFILES TABLE
-- Stores user-specific information, linked to Supabase Auth.
CREATE TABLE public.profiles (
  id uuid NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  updated_at timestamptz,
  name text,
  student_id text UNIQUE,
  email text UNIQUE,
  year text,
  course text,
  organization text,
  role text DEFAULT 'student',
  membership_paid boolean DEFAULT false,
  membership_expiry timestamptz
);

-- Comments for Profiles Table
COMMENT ON TABLE public.profiles IS 'Stores public profile information for each user, extending the auth.users table.';
COMMENT ON COLUMN public.profiles.id IS 'Links to auth.users.id.';
COMMENT ON COLUMN public.profiles.role IS 'User role for authorization (e.g., "admin", "student").';

-- RLS for Profiles
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view all profiles."
  ON public.profiles FOR SELECT
  USING ( auth.role() = 'authenticated' );

CREATE POLICY "Users can insert their own profile."
  ON public.profiles FOR INSERT
  WITH CHECK ( auth.uid() = id );

CREATE POLICY "Users can update their own profile."
  ON public.profiles FOR UPDATE
  USING ( auth.uid() = id );

-- 2. ANNOUNCEMENTS TABLE
-- Stores announcements posted by admins.
CREATE TABLE public.announcements (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  created_at timestamptz DEFAULT now(),
  title text NOT NULL,
  content text,
  author_id uuid REFERENCES public.profiles(id) ON DELETE SET NULL
);

-- Comments for Announcements Table
COMMENT ON TABLE public.announcements IS 'Stores organization-wide announcements.';

-- RLS for Announcements
ALTER TABLE public.announcements ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Authenticated users can view announcements."
  ON public.announcements FOR SELECT
  USING ( auth.role() = 'authenticated' );

CREATE POLICY "Admins can manage announcements."
  ON public.announcements FOR ALL
  USING ( (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin' )
  WITH CHECK ( (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin' );

-- 3. EVENTS TABLE
-- Stores event information.
CREATE TABLE public.events (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  created_at timestamptz DEFAULT now(),
  title text NOT NULL,
  description text,
  date date,
  time time,
  location text,
  type text
);

-- Comments for Events Table
COMMENT ON TABLE public.events IS 'Stores details for all organization events.';

-- RLS for Events
ALTER TABLE public.events ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Authenticated users can view events."
  ON public.events FOR SELECT
  USING ( auth.role() = 'authenticated' );

CREATE POLICY "Admins can manage events."
  ON public.events FOR ALL
  USING ( (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin' )
  WITH CHECK ( (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin' );

-- 4. PAYMENTS TABLE
-- Stores payment and due information for members.
CREATE TABLE public.payments (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  created_at timestamptz DEFAULT now(),
  student_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE,
  amount numeric,
  type text,
  status text,
  transaction_id text UNIQUE
);

-- Comments for Payments Table
COMMENT ON TABLE public.payments IS 'Tracks member payments and dues.';

-- RLS for Payments
ALTER TABLE public.payments ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own payments, admins can view all."
  ON public.payments FOR SELECT
  USING ( auth.uid() = student_id OR (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin' );

CREATE POLICY "Users can create their own payments."
  ON public.payments FOR INSERT
  WITH CHECK ( auth.uid() = student_id );

CREATE POLICY "Admins can update payments."
  ON public.payments FOR UPDATE
  USING ( (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin' );

-- 5. TRIGGER FOR NEW USER PROFILE
-- This function automatically creates a profile entry when a new user signs up.
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, email, name, student_id, year, course, organization, role, membership_expiry)
  VALUES (
    new.id,
    new.email,
    new.raw_user_meta_data->>'name',
    new.raw_user_meta_data->>'studentId',
    new.raw_user_meta_data->>'year',
    new.raw_user_meta_data->>'course',
    new.raw_user_meta_data->>'organization',
    'student',
    (now() + interval '1 year')
  );
  
  -- Create an initial pending payment for the new member
  INSERT INTO public.payments (student_id, amount, type, status, transaction_id)
  VALUES (
    new.id,
    (new.raw_user_meta_data->>'membershipFee')::numeric,
    'Membership Fee',
    'Pending',
    'TXN' || substr(replace(gen_random_uuid()::text, '-', ''), 1, 12)
  );
  
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create the trigger
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- 6. SEED ADMIN USER
-- This statement should be run manually after creating an admin user via the Supabase dashboard or client.
-- Replace 'admin-user-id' with the actual UUID of your admin user from auth.users.
-- INSERT INTO public.profiles (id, name, email, role)
-- VALUES ('admin-user-id', 'System Administrator', 'admin@org.com', 'admin');
